1. 컴파일러란?
   - 개발자(인간 언어) -> 컴퓨터(기계어) 간 통역사 역할
   - 프로그래밍 언어(Java, JS, Python, SQL 등)를 기계어로 번역
   - 자바의 경우:
     * 컴파일: 자바 언어를 바이트코드로 번역하는 과정
     * 컴파일러: 번역을 수행하는 프로그램

2. 예외처리
   A. 오류(Error) vs 예외(Exception)
      - 오류: 시스템 종료 수준의 심각한 문제, 주로 하드웨어 관련
      - 예외: 개발자의 로직이나 사용자 영향으로 발생, 예측과 방지 가능

   B. 예외 종류
      1) 일반예외: 컴파일러가 처리 여부 검사 (예: 입출력, 파일처리, 네트워크, JDBC)
      2) 실행예외: 컴파일러가 처리 여부 미검사 (예: NullPointer, 타입, 인덱스 관련)

   C. 예외처리의 목적
      - 프로그램 안정성 확보 (24시간 안전 운영)
      - 예외 발생 시 대체 흐름 제공
      - 추후 코드 수정 및 대안 마련 용이

   D. 예외처리 문법
      try {
          // 예외 발생 가능 코드
      } catch (예외클래스 변수명) {
          // 예외 발생 시 실행할 코드
      } finally {
          // 항상 실행되는 코드 (주로 리소스 해제)
      }

   E. 주요 예외 클래스 (Exception 하위)
    - ClassNotFoundException: 해당 클래스를 찾지 못했을 때 발생
    - NullPointerException: 해당 변수의 참조(주소) 없이 접근 연산자 사용 시 발생
    - NumberFormatException: 숫자형 타입 변환 불가 시 발생
    - ArrayIndexOutOfBoundsException: 존재하지 않는 인덱스 접근 시 발생
    - InputMismatchException: 입력 타입 불일치 시 발생

3. 예외 던지기/떠넘기기
   - 목적: 여러 곳의 예외를 한 곳에서 일괄 처리
   - 비유: 쓰레기를 쓰레기장에 모아 폐기물차가 수거하는 것과 유사
   - 방식: 예외 발생 지점에서 상위 메소드로 예외를 전달