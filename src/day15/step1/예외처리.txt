* 컴파일러란?
    개발자(한국어/영어)                         컴퓨터(기계어)
                    ----------명령어--------->
                         - 프로그래밍 언어
                      자바, JS, 파이썬, SQL 등
    자바언어(영어)    ------------------------>
                            - 번역사
                    컴파일: 자바언어를 바이트언어로 번역하는 행위
                    컴파일러: 번역하는 프로그램

예외처리
    - 오류/에러(ERROR): 시스템이 종료되는 수준의 심각한 문제가 발생
        - 프로그램 개발자가 예측하여 방지하기 힘들다. 주로 하드웨어(메모리,CPU)
    - 예외(Exception): 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생
        - 오류와 달리 프로그램 개발자가 예측하여 방지가 가능하다. 경험이 중요시 된다
    - 예외 종류
        1. 일반예외: 컴파일러가 예외 처리 코드 여부를 검사하는 예외
            - 주로 외부 시스템과 연동시 발생: 입출력, 파일처리, 네트워크, JDBC(자바-DB)

        2. 실행예외: 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외
            - 실행 도중에 발생: NULL, 타입관련, 인덱스 등등
            - 개발자의 경험의 의존성이 크다. 꼼꼼해야 한다.

    예외처리란: 예외가 발생했을 때 다른 흐름으로 제어
        - 예외 고치거나 코드를 수정하거나 작업이 아니다.
        - if랑 비슷하면서 다르다
        - 이유: 예외 발생하면 빨간색으로 콘솔에 예외사유 나오면서 프로그램 종료
            - 프로그램 배포시 사용자가 안전하게 24시간 사용시 예외발생 하더라도 제어해서 안전한 프로그램 완성하기 위해서
            - 추후에 예외 관련해서 코드 수정 하거나 대안 마련
        - 문법
            try {
                예외 발생하거나 발생할 것 같은(예측) 코드를 넣음
            } catch(해당예외클래스명 객체변수명) {
                예외 발생했을때 코드
            }
    예외 클래스
        - 슈퍼 클래스: Exception 클래스
            - ClassNotFoundException 클래스: 해당 클래스를 못찾았을때 발생하는 예외
            - NullPointerException 클래스: 해당 변수의 참조(주소)가 없는데 .(도트/접근)연산자를 사용했을때 문제를 관리하는 클래스